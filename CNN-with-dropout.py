import keras
from keras.models import Sequential, Input, Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.layers.advanced_activations import LeakyReLU

width = 256

train_X = train_X.reshape(-1, width, width, 1)
test_X = test_X.reshape(-1, width, width, 1)

# Network parameters:

batch_size = 64
epochs = 20
num_classes = 25

# Architecture

Malware_Model = Sequential()
Malware_Model.add(Conv2D(32,
                         kernel_size=(3, 3),
                         activation='linear',
                         input_shape=(width, width, 1),
                         padding='same'))
Malware_Model.add(LeakyReLU(alpha=0.1))
Malware_model.add(MaxPooling2D(pool_size=(2, 2),
                               padding='same'))
Malware_Model.add(Conv2D(64, (3, 3),
                         activation='linear',
                         padding='same'))
Malware_Model.add(LeakyReLU(alpha=0.1))
Malware_Model.add(Dense(1024,
                        activation='linear'))
Malware_Model.add(LeakyReLU(alpha=0.1))
Malware_Model.add(Dropout(0.4))
Malware_Model.add(Dense(num_classes,
                        activation='softmax'))

# Compile the model

Malware_Model.compile(loss=keras.losses.categorical_crossentropy,
                      optimizer=keras.optimizers.Adam(),
                      metrics=['accuracy'])

# Fit and Train the model:

Malware_Model.fit(train_X, train_label,
                  batch_size=batch_size,
                  epochs=epochs,
                  verbose=1)
                #   validation_data=(valid_X, valid_label))

# Evaluste the model

Malware_Model.evaluate(test_X, test_Y_one_hot, verbose=0)
# print('The accuracy of the Test is:', test_eval[1])
